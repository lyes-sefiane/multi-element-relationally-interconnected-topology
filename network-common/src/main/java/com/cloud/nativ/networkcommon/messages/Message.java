/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cloud.nativ.networkcommon.messages;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1440873379316797605L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"com.cloud.nativ.networkcommon.messages\",\"fields\":[{\"name\":\"date\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}]},{\"name\":\"Status\",\"type\":\"string\"},{\"name\":\"networkElement\",\"type\":{\"type\":\"record\",\"name\":\"NetworkElement\",\"namespace\":\"com.cloud.nativ.networkcommon.messages.entities\",\"fields\":[{\"name\":\"ipAddress\",\"type\":\"string\"},{\"name\":\"area\",\"type\":\"int\"},{\"name\":\"elementType\",\"type\":\"string\"},{\"name\":\"connections\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Connection\",\"fields\":[{\"name\":\"ipAddress\",\"type\":\"string\"},{\"name\":\"cost\",\"type\":\"int\"}]}}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<Message> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Message> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Message> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Message> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Message> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Message to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Message from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Message instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Message fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.time.LocalDate date;
  private java.lang.CharSequence Status;
  private com.cloud.nativ.networkcommon.messages.entities.NetworkElement networkElement;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Message() {}

  /**
   * All-args constructor.
   * @param date The new value for date
   * @param Status The new value for Status
   * @param networkElement The new value for networkElement
   */
  public Message(java.time.LocalDate date, java.lang.CharSequence Status, com.cloud.nativ.networkcommon.messages.entities.NetworkElement networkElement) {
    this.date = date;
    this.Status = Status;
    this.networkElement = networkElement;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return Status;
    case 2: return networkElement;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.time.LocalDate)value$; break;
    case 1: Status = (java.lang.CharSequence)value$; break;
    case 2: networkElement = (com.cloud.nativ.networkcommon.messages.entities.NetworkElement)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.time.LocalDate getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.time.LocalDate value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'Status' field.
   * @return The value of the 'Status' field.
   */
  public java.lang.CharSequence getStatus() {
    return Status;
  }


  /**
   * Sets the value of the 'Status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.Status = value;
  }

  /**
   * Gets the value of the 'networkElement' field.
   * @return The value of the 'networkElement' field.
   */
  public com.cloud.nativ.networkcommon.messages.entities.NetworkElement getNetworkElement() {
    return networkElement;
  }


  /**
   * Sets the value of the 'networkElement' field.
   * @param value the value to set.
   */
  public void setNetworkElement(com.cloud.nativ.networkcommon.messages.entities.NetworkElement value) {
    this.networkElement = value;
  }

  /**
   * Creates a new Message RecordBuilder.
   * @return A new Message RecordBuilder
   */
  public static com.cloud.nativ.networkcommon.messages.Message.Builder newBuilder() {
    return new com.cloud.nativ.networkcommon.messages.Message.Builder();
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Message RecordBuilder
   */
  public static com.cloud.nativ.networkcommon.messages.Message.Builder newBuilder(com.cloud.nativ.networkcommon.messages.Message.Builder other) {
    if (other == null) {
      return new com.cloud.nativ.networkcommon.messages.Message.Builder();
    } else {
      return new com.cloud.nativ.networkcommon.messages.Message.Builder(other);
    }
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Message instance.
   * @param other The existing instance to copy.
   * @return A new Message RecordBuilder
   */
  public static com.cloud.nativ.networkcommon.messages.Message.Builder newBuilder(com.cloud.nativ.networkcommon.messages.Message other) {
    if (other == null) {
      return new com.cloud.nativ.networkcommon.messages.Message.Builder();
    } else {
      return new com.cloud.nativ.networkcommon.messages.Message.Builder(other);
    }
  }

  /**
   * RecordBuilder for Message instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private java.time.LocalDate date;
    private java.lang.CharSequence Status;
    private com.cloud.nativ.networkcommon.messages.entities.NetworkElement networkElement;
    private com.cloud.nativ.networkcommon.messages.entities.NetworkElement.Builder networkElementBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cloud.nativ.networkcommon.messages.Message.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Status)) {
        this.Status = data().deepCopy(fields()[1].schema(), other.Status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.networkElement)) {
        this.networkElement = data().deepCopy(fields()[2].schema(), other.networkElement);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasNetworkElementBuilder()) {
        this.networkElementBuilder = com.cloud.nativ.networkcommon.messages.entities.NetworkElement.newBuilder(other.getNetworkElementBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Message instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cloud.nativ.networkcommon.messages.Message other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Status)) {
        this.Status = data().deepCopy(fields()[1].schema(), other.Status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.networkElement)) {
        this.networkElement = data().deepCopy(fields()[2].schema(), other.networkElement);
        fieldSetFlags()[2] = true;
      }
      this.networkElementBuilder = null;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.time.LocalDate getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public com.cloud.nativ.networkcommon.messages.Message.Builder setDate(java.time.LocalDate value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public com.cloud.nativ.networkcommon.messages.Message.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return Status;
    }


    /**
      * Sets the value of the 'Status' field.
      * @param value The value of 'Status'.
      * @return This builder.
      */
    public com.cloud.nativ.networkcommon.messages.Message.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Status' field has been set.
      * @return True if the 'Status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Status' field.
      * @return This builder.
      */
    public com.cloud.nativ.networkcommon.messages.Message.Builder clearStatus() {
      Status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'networkElement' field.
      * @return The value.
      */
    public com.cloud.nativ.networkcommon.messages.entities.NetworkElement getNetworkElement() {
      return networkElement;
    }


    /**
      * Sets the value of the 'networkElement' field.
      * @param value The value of 'networkElement'.
      * @return This builder.
      */
    public com.cloud.nativ.networkcommon.messages.Message.Builder setNetworkElement(com.cloud.nativ.networkcommon.messages.entities.NetworkElement value) {
      validate(fields()[2], value);
      this.networkElementBuilder = null;
      this.networkElement = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'networkElement' field has been set.
      * @return True if the 'networkElement' field has been set, false otherwise.
      */
    public boolean hasNetworkElement() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'networkElement' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.cloud.nativ.networkcommon.messages.entities.NetworkElement.Builder getNetworkElementBuilder() {
      if (networkElementBuilder == null) {
        if (hasNetworkElement()) {
          setNetworkElementBuilder(com.cloud.nativ.networkcommon.messages.entities.NetworkElement.newBuilder(networkElement));
        } else {
          setNetworkElementBuilder(com.cloud.nativ.networkcommon.messages.entities.NetworkElement.newBuilder());
        }
      }
      return networkElementBuilder;
    }

    /**
     * Sets the Builder instance for the 'networkElement' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.cloud.nativ.networkcommon.messages.Message.Builder setNetworkElementBuilder(com.cloud.nativ.networkcommon.messages.entities.NetworkElement.Builder value) {
      clearNetworkElement();
      networkElementBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'networkElement' field has an active Builder instance
     * @return True if the 'networkElement' field has an active Builder instance
     */
    public boolean hasNetworkElementBuilder() {
      return networkElementBuilder != null;
    }

    /**
      * Clears the value of the 'networkElement' field.
      * @return This builder.
      */
    public com.cloud.nativ.networkcommon.messages.Message.Builder clearNetworkElement() {
      networkElement = null;
      networkElementBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Message build() {
      try {
        Message record = new Message();
        record.date = fieldSetFlags()[0] ? this.date : (java.time.LocalDate) defaultValue(fields()[0]);
        record.Status = fieldSetFlags()[1] ? this.Status : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (networkElementBuilder != null) {
          try {
            record.networkElement = this.networkElementBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("networkElement"));
            throw e;
          }
        } else {
          record.networkElement = fieldSetFlags()[2] ? this.networkElement : (com.cloud.nativ.networkcommon.messages.entities.NetworkElement) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Message>
    WRITER$ = (org.apache.avro.io.DatumWriter<Message>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Message>
    READER$ = (org.apache.avro.io.DatumReader<Message>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










